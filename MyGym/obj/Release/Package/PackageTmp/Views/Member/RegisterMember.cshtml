@model MyGym.Models.Member

@{
    ViewBag.Title = "RegisterMember";
}

<script src="~/Scripts/jquery-1.11.1.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>
<link href="~/Scripts/jquery-ui.min.css" rel="stylesheet" />

<link href="~/fonts/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
<script src="~/bootstrap/js/bootstrap.min.js"></script>
<link href="~/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/Site.css" rel="stylesheet" />

<script type="text/javascript">
    $(document).ready(function () {

        $("#WorkouttypeID").change(function () {
            $("#PlantypeID").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetPlan")',
                dataType: 'json',
                data: { WorkTypeID: $("#WorkouttypeID").val() },
                success: function (plandata) {
                    $("#PlantypeID").append('<option value="' + "0" + '">' + "Select" + '</option>');

                    $.each(plandata, function (i, plan) {
                        $("#PlantypeID").append('<option value="' + plan.PlanID + '">' + plan.PlanName + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Plan List.' + ex);
                }
            });
            return false;
        })


    });

</script>

<script type="text/javascript">

    $(document).ready(function () {
        $("#PlantypeID").change(function () {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetAmount")',
                dataType: 'json',
                data: { PlanID: $("#PlantypeID").val(), WorkTypeID: $("#WorkouttypeID").val() },
                success: function (amount) {
                    $("#Amount").val(amount);
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })
    });


</script>

<div class="container">
    <div class="clearfix"></div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <fieldset>
            <legend>Register Member</legend>

            <div class="panel">
                <div class="panel-body">

                    <div>
                        @Html.ActionLink("All Member Registration", "GetAllMembers", "Member", new { @class = "btn btn-info btn-pressure" })
                    </div>

                    <br />


                    <div style="margin-top: 5px"></div>

                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.MemberFName)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.MemberFName, new { @class = "form-control" })
                        </div>
                        <div class="col-md-1"></div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.MemberLName)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.MemberLName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div style="margin-top: 5px"></div>

                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.MemberMName)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.MemberMName, new { @class = "form-control" })
                        </div>
                        <div class="col-md-1 col-sm-1"></div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.JoiningDate)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.JoiningDate, new { @class = "form-control date-picker", @readonly = "readonly" })
                        </div>
                    </div>
                    <div style="margin-top: 5px"></div>

                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.DOB)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.DOB, new { @class = "form-control date-picker", @readonly = "readonly" })
                        </div>
                        <div class="col-md-1"></div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Age)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.Age, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div style="margin-top: 5px"></div>

                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Gender)
                        </div>
                        <div class="col-md-3">
                            @Html.DropDownList("Gender",
                                         new List<SelectListItem>
                            {  
                                             new SelectListItem {Text = "Male", Value = "1"},
                                             new SelectListItem {Text = "Female", Value = "2"}}, "Select Gender", new { @class = "form-control" })
                        </div>
                        <div class="col-md-1 col-sm-1"></div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.EmailID)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.EmailID, new { @class = "form-control" })
                        </div>
                    </div>
                    <div style="margin-top: 5px"></div>


                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.WorkouttypeID)
                        </div>
                        <div class="col-md-3">
                            @Html.DropDownListFor(model => model.WorkouttypeID, new SelectList(Model.ListScheme, "SchemeID", "SchemeName"), "Select Workout Type", new { @class = "form-control" })
                        </div>
                        <div class="col-md-1 col-sm-1"></div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.PlantypeID)
                        </div>
                        <div class="col-md-3">
                            @Html.DropDownListFor(model => model.PlantypeID, ViewBag.planlist as IEnumerable<SelectListItem>, "Select Plan Type", new { @class = "form-control" })
                        </div>
                    </div>
                    <div style="margin-top: 10px"></div>

                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Contactno)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.Contactno, new { @class = "form-control", maxlength = "10" })
                        </div>
                        <div class="col-md-1 col-sm-1"></div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Address)
                        </div>
                        <div class="col-md-3">
                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control" })
                        </div>
                    </div>
                    <div style="margin-top: 5px"></div>

                    <div class="row">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Amount)
                        </div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.Amount, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                        <div class="col-md-1 col-sm-1"></div>
                    </div>
                    <div style="margin-top: 5px"></div>

                    <div class="row">
                        <div class="col-md-12">
                            @Html.ValidationSummary(false, "Please fix the following errors and then submit the form")
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                <input type="submit" value="Create" />
                            </p>
                        </div>
                    </div>

                </div>
            </div>
        </fieldset>
    }


</div>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@

@section Scripts {

    <script src="~/Scripts/jquery-ui.min.js"></script>

    @Styles.Render("~/Content/themes/base/css")



    <script type="text/javascript">
        $(document).ready(function () {

            $(".date-picker").datepicker(
            {
                changeMonth: true,
                changeYear: true,
                beforeShow: customRange,
                dateFormat: "dd/mm/yy",
                yearRange: "-100:+100",
                onSelect: function (selectedDate) {
                    if (this.id == 'DOB') {
                        CalculateAge(selectedDate);
                    }
                    
                }
            });

            function customRange(input) {

                return {
                    maxDate: (input.id == "DOB" ? "dateToday" : (input.id == "JoiningDate" ? new Date(new Date().setFullYear(new Date().getFullYear() + 1)) : null)),
                    minDate: (input.id == "JoiningDate" ? "dateToday" : null)

                };
            }
        });


        function CalculateAge(selectedDate) {
            var x = selectedDate.split('/');
            var curYear = new Date().getUTCFullYear();
            var age = curYear - x[2];
            $('#Age').val(age);
        }
    </script>

}

